grammar NagiosConfig
  rule program
    object_definition* {
      def build
        elements.map { |od| od.build }
      end
    }
  end
  
  rule object_definition
    space 'define' space_required definition_type space '{' space directives space '}' space {
      def build
        object = case definition_type.text_value
        when "host"
          Host.new
        end
        
        directives.elements.each do |d|
          directive = d.build
          name = directive.first
          value = directive.last
          
          object.send("#{name}=", value)
        end
        
        object
      end
    }
  end
  
  rule directives
    directive* {
      def build
        elements.map { |od| od.build }
      end
    }
  end
  
  rule directive
    space directive_name space_required_no_newline directive_value (eol_comment / space_no_newline) newline {
      def build
        [directive_name.text_value, directive_value.text_value]
      end
    }
  end
  
  rule eol_comment
    ';' [^\n\r\f]*
  end
  
  rule directive_name
    'host_name' / 'alias' / 'display_name' / 'address' / 'parents' / 'hostgroups' / 
    'check_command'
  end
  
  rule directive_value
    [^\n\r\f;]+
  end
  
  rule definition_type
    'hostgroup' / 'hostdependency' / 'hostescalation' / 'hostextinfo' / 'host' /
    'servicedependency' / 'serviceescalation' / 'serviceextinfo' / 'servicegroup' / 'service' /
    'contactgroup' / 'contact' / 'timeperiod' / 'command'
  end
  
  rule space_required_no_newline
    [ \t]+
  end
  
  rule space_no_newline
    [ \t]*
  end
  
  rule space_required
    [ \t\n]+
  end
  
  rule space
    [ \t\n]*
  end
  
  rule newline
    [\n\r\f]+
  end
end